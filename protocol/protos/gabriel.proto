syntax = "proto3";

package gabriel;

import "google/protobuf/any.proto";

option java_package = "edu.cmu.cs.gabriel.protocol";
option java_outer_classname = "Protos";

enum PayloadType {
    IMAGE = 0;
    VIDEO = 1;
    AUDIO = 2;
    IMU = 3;
    TEXT = 4;
    ANIMATION = 5;
    OTHER = 6;
}

message InputFrame {
    PayloadType payload_type = 1;
    repeated bytes payloads = 2;
    // Optional additional fields
    google.protobuf.Any extras = 3;
}

message FromClient {
    int64 frame_id = 1;
    string token_bucket = 2;
    InputFrame input_frame = 3;
    repeated string target_computation_types = 4;
}

message ResultWrapper {
    enum Status {
        SUCCESS = 0;
        UNSPECIFIED_ERROR = 1;

        // Errors that are not related to Gabriel but rather to the engine
        // itself.
        ENGINE_ERROR = 2;

        // Cognitive engine expected different PayloadType from this source
        WRONG_INPUT_FORMAT = 3;

        // No cognitive engines perform the requested computation.
        NO_ENGINE_FOR_COMPUTATION = 4;

        // This client has no tokens to send frames from source_name
        NO_TOKENS = 5;

        // The server dropped the frame because it was backed up
        SERVER_DROPPED_FRAME = 6;
    }

    message Result {
        PayloadType payload_type = 1;
        bytes payload = 2;
    }

    // From https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/wrappers.proto#L120
    // TODO: Switch to google.protobuf.StringValue once MobilEdgeX supports
    // protobuf-javalite
    message StringValue {
        // The string value.
        string value = 1;
    }

    Status status = 1;
    repeated Result results = 2;

    // Optional additional fields
    google.protobuf.Any extras = 3;

    // Optionally specify the name of the module that produced the result
    StringValue result_producer_name = 4;
}

message ToClient {
    message Welcome {
        repeated string computations_supported = 1;
        int32 num_tokens_per_source = 2;
    }

    message Response {
        // The computation type that the response corresponds to; allows the
        // client to return the tokens correctly.
        string computation_type = 1;
        int64 frame_id = 2;
        bool return_token = 3;
        ResultWrapper result_wrapper = 4;
    }

    oneof welcome_or_response {
        Welcome welcome = 1;
        Response response = 2;
    }
}

message FromStandaloneEngine {
    message Welcome {
        string computation_type = 1;
        bool all_responses_required = 2;
        string engine_name = 3;
    }

    oneof welcome_or_result_wrapper {
        Welcome welcome = 1;
        ResultWrapper result_wrapper = 2;
    }
}
